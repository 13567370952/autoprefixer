# Copyright 2013 Andrey Sitnik <andrey@sitnik.ru>,
# sponsored by Evil Martians.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

https = require('https')
path  = require('path')
fs    = require('fs')

module.exports =

  # Can I Use browser names to internal
  browsers:
    firefox: 'ff'
    chrome:  'chrome'
    safari:  'safari'
    ios_saf: 'ios'
    opera:   'opera'
    ie:      'ie'

  # Count of loading HTTP requests
  requests: 0

  # Execute `callback`, when all `caniuse` request will be finished.
  done: (callback) ->
    @doneCallback = callback

  # Load file from Can I Use repository and run `callback` with JSON content.
  caniuse: (file, callback) ->
    @requests += 1
    https.get "https://raw.github.com/Fyrd/caniuse/master/#{file}", (res) =>
      data = '';
      res.on 'data', (chunk) -> data += chunk
      res.on 'end', =>
        callback(JSON.parse(data))
        @requests -= 1
        @doneCallback?() if @requests == 0

  # Return string of object. Like `JSON.stringify`, but also support functions.
  stringify: (obj, indent = '') ->
    if obj instanceof Array
      local = indent + '    '
      "[\n#{local}" +
        obj.map( (i) => @stringify(i, local) ).join(",\n#{local}") +
      "\n#{indent}]"

    else if typeof(obj) == 'object'
      local = indent + '    '

      processed = []
      for key, value of obj
        key = "\"#{key}\"" if key.match(/'|-|@/)
        processed.push(key + ': ' + @stringify(value, local))

      "{\n" +
          local + processed.join(",\n#{local}") + "\n" +
      indent + '}'

    else if typeof(obj) == 'function'
      obj.toString().replace(/\n\s+/g, "\n#{indent}    ").
                     replace(/\s\s\s\s\}$/, '}')

    else
      JSON.stringify(obj)


  # Save autogenerated `file` wirh warning comment and node.js exports.
  save: (file, json) ->
    sorted = {}
    sorted[k] = json[k] for k in Object.keys(json).sort()

    file     = path.join(__dirname, '../../data', file)
    content  = "// Don't edit this files, because it's autogenerated.\n" +
               "// See updaters/ dir for generator. " +
                  "Run bin/update to update.\n\n"
    content += "module.exports = " + @stringify(sorted) + ";\n"
    fs.writeFileSync(file, content)
